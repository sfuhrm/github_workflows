---
name: JPackage

on:
  workflow_call:
    inputs:
      java_version:
        required: false
        type: string
        default: '21'
        description: "Stringified JSON object listing the Java releases to build the software with (i.e. 11)."
      maven_target:
        required: false
        type: string
        default: package
        description: "The Maven target to build, defaults to 'package'."
      artifact_name:
        type: string
        description: "The artifact name to upload"
        required: false
        default: "jpackage"
      jpackage_input:
        required: true
        type: string
        description: "The directory to change to. Matches the jpackage option --input."
      jpackage_name:
        required: true
        type: string
        description: "The name of the package. Usually the application name. Matches the jpackage option --name."
      jpackage_jarfile:
        required: true
        type: string
        description: "Path of the JAR file with the main class and method."
      jpackage_license:
        required: true
        type: string
        description: "Path of the LICENSE file."
      jpackage_vendor:
        required: true
        type: string
        description: "Vendor name, matches the --vendor flag of jpackage."
      jpackage_copyright:
        required: true
        type: string
        description: "Copyright matches the --copyright flag of jpackage."
      jpackage_description:
        required: true
        type: string
        description: "Description of the package. Matches the --description flag of jpackage."
      jpackage_mainclass:
        required: true
        type: string
        description: "Name of the main class. Matches the --main-class flag of jpackage."
      jpackage_linux_deb_maintainer:
        required: true
        type: string
        description: "Matches the --linux-deb-maintainer flag of jpackage."
      jpackage_linux_app_category:
        required: true
        type: string
        description: "Matches the --linux-app-category flag of jpackage."
      jpackage_linux_install_dir:
        required: false
        type: string
        description: "Matches the --install-dir flag of jpackage."
        default: /usr
      jpackage_macos_install_dir:
        required: false
        type: string
        description: "Matches the --install-dir flag of jpackage."
        default: /Applications
      jpackage_win_upgrade_uuid:
        required: true
        type: string
        description: "Matches the --win-upgrade-uuid flag of jpackage."

env:
  JPACKAGE_COMMON_OPTS: |
            --name "${{ inputs.jpackage_name }}" \
            --copyright "${{ inputs.jpackage_copyright }}" \
            --vendor "${{ inputs.jpackage_vendor }}" \
            --description "${{ inputs.jpackage_description }}" \
            --main-class "${{ inputs.jpackage_mainclass }}" \
            --dest jpackage-app \
            --verbose

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: ${{ inputs.java_version }}
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - name: Extract current maven version
        run: echo "version=$(mvn org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT
        id: version
        shell: bash


      - uses: actions/upload-artifact@v4
        with:
          name: build
          path: "**/target/*"

  ###
  ### Debian Linux
  ### Oracle Linux
  ###
  jpackage_linux:
    needs: build
    outputs:
      packagename: ${{ steps.packagename.outputs.packagename }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            container: debian:10
            jpkg_type: deb
            style: debian
          - os: ubuntu-latest
            container: oraclelinux:8.5
            jpkg_type: rpm
            style: redhat
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    env:
      PACKAGE_VERSION: ${{ needs.build.outputs.version }}
    steps:
      - name: Download build
        uses: actions/download-artifact@v4.1.7
        with:
          name: build
      - name: Setup Debian container
        run: |
          echo "List of current dir:"
          ls -alR
          echo "Debian version:"
          cat /etc/debian_version
          apt-get update
          apt-get install -y --no-install-recommends curl openssh-client git fakeroot curl binutils
        if: matrix.style == 'debian'
      - name: Setup OracleLinux container
        run: |
          echo "List of current dir:"
          ls -alR
          yum install --assumeyes rpm-build git openssh-clients
        if: matrix.style == 'redhat'
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: ${{ inputs.java_version }}
      - name: Build package
        run: |
          if test "${{ matrix.style }}" = "redhat"; then
            PACKAGE_VERSION=$(echo ${PACKAGE_VERSION} | cut -d"-" -f1)
            echo "Fixing RPM version to ${PACKAGE_VERSION}"
          fi
          jpackage \
            --main-jar ${{ inputs.jpackage_jarfile }} \
            --type "${{ matrix.jpkg_type }}" \
            --app-version "${PACKAGE_VERSION}" \
            --input "${{ inputs.jpackage_input }}" \
            --license-file "${{ inputs.jpackage_license }}" \
            --linux-deb-maintainer "${{ inputs.jpackage_linux_deb_maintainer }}" \
            --linux-app-category "${{ inputs.jpackage_linux_app_category }}" \
            --install-dir "${{ inputs.jpackage_linux_install_dir }}" \
            ${{ env.JPACKAGE_COMMON_OPTS }}
      - name: Extract package name
        run: echo "packagename=$(ls)" >> $GITHUB_OUTPUT
        working-directory: jpackage-app
        id: packagename
        shell: bash
      - name: Test install package Debian
        run: apt-get install --assume-yes ./jpackage-app/${{ steps.packagename.outputs.packagename }}
        if: matrix.style == 'debian'
      - name: Test install package RPM
        run: yum localinstall --assumeyes ./jpackage-app/${{ steps.packagename.outputs.packagename }}
        if: matrix.style == 'redhat'
      - name: Test run application
        run: radiorecorder -V
      - uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.jpackage_type }}
          path: jpackage-app/${{ steps.packagename.outputs.packagename }}

  ###
  ### MacOS
  ###
  jpackage_macos:
    needs: build
    outputs:
      packagename: ${{ steps.packagename.outputs.packagename }}
    strategy:
      matrix:
        include:
          - jpkg_type: dmg
          - jpkg_type: pkg
    runs-on: macos-latest
    env:
      PACKAGE_VERSION: ${{ needs.build.outputs.version }}
    steps:
      - name: Download build
        uses: actions/download-artifact@v4.1.7
        with:
          name: build
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: ${{ inputs.java_version }}
      - name: Build package
        run: |
          PACKAGE_VERSION=$(echo ${PACKAGE_VERSION} | cut -d"-" -f1)
          jpackage \
            --main-jar "${{ inputs.jpackage_jarfile }}" \
            --type "${{ matrix.jpkg_type }}" \
            --app-version "${PACKAGE_VERSION}" \
            --input "${{ inputs.jpackage_input }}" \
            --license-file "${{ inputs.jpackage_license }}" \
            --install-dir "${{ inputs.jpackage_macos_install_dir }}" \
            ${{ env.JPACKAGE_COMMON_OPTS }}
      - name: Extract package name
        run: echo "packagename=$(ls)" >> $GITHUB_OUTPUT
        working-directory: jpackage-app
        id: packagename
        shell: bash
      - uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.jpkg_type }}
          path: jpackage-app/${{ steps.packagename.outputs.packagename }}


  ###
  ### Windows
  ###
  jpackage_windows:
    needs: build
    outputs:
      packagename: ${{ steps.packagename.outputs.packagename }}
    strategy:
      matrix:
        include:
          - jpkg_type: exe
          - jpkg_type: msi
    runs-on: windows-latest
    env:
      PACKAGE_VERSION: ${{ needs.build.outputs.version }}
    steps:
      - name: Download build
        uses: actions/download-artifact@v4.1.7
        with:
          name: build
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: ${{ inputs.java_version }}
      - name: Build package
        run: |
          PACKAGE_VERSION=$(echo ${PACKAGE_VERSION} | cut -d"-" -f1)
          jpackage \
            --main-jar "${{ inputs.jpackage_jarfile }}" \
            --type "${{ matrix.jpkg_type }}" \
            --app-version "${PACKAGE_VERSION}" \
            --input "${{ inputs.jpackage_input }}" \
            --license-file "${{ inputs.jpackage_license }}" \
            --win-console \
            --win-upgrade-uuid "${{ inputs.jpackage_win_upgrade_uuid }}" \
            ${{ env.JPACKAGE_COMMON_OPTS }}
        shell: bash
      - name: Extract package name
        run: echo "packagename=$(ls)" >> $GITHUB_OUTPUT
        working-directory: jpackage-app
        id: packagename
        shell: bash
      - uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.jpkg_type }}
          path: jpackage-app/${{ steps.packagename.outputs.packagename }}

  merge_packages:
    needs:
      - build
      - jpackage_linux
      - jpackage_macos
      - jpackage_windows
    runs-on: ubuntu-latest
    steps:
      - name: Download package artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          path: packages
          pattern: packages-*
          merge-multiple: true
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact_name }}
          path: packages
